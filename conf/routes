# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~


# ------------------------------- Main routes ---------------------------------
# Home page
GET     /                           controllers.Assets.at(path="/public", file="index.html")
# this is a workaround for oAuth call
GET     /main                       controllers.Application.index
# Javascript routes
GET     /assets/javascript/routes.js    controllers.Application.jsRoutes
# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
# --------------------------------------------------------------------------



# ----------------------------- Authentication routes -------------------------
POST    /login                      controllers.Application.doLogin

GET     /logout                     com.feth.play.module.pa.controllers.Authenticate.logout

POST    /signup                     controllers.Application.doSignup

GET     /accounts/verify/:token     controllers.Signup.verify(token: String)
GET     /accounts/exists            controllers.Signup.exists
GET     /tokenSuccess               controllers.Application.tokenSuccess
GET     /tokenFail                  controllers.Application.tokenFail

POST    /login/password/forgot      controllers.Signup.doForgotPassword
GET     /accounts/password/reset/:token     controllers.Signup.resetPassword(token: String, errors: String ?= "")
POST    /accounts/password/reset    controllers.Signup.doResetPassword
GET     /passwordResetSuccess       controllers.Application.passwordResetSuccess
GET     /passwordResetFail/:msg     controllers.Application.passwordResetFail(msg: String)

POST    /accounts/password/change   controllers.Account.doChangePassword
# --------------------------------------------------------------------------



# ----------------- Authentication Unverified routes ----------------------
GET     /accounts/verify            controllers.Account.verifyEmail

GET     /accounts/link              controllers.Account.askLink
POST    /accounts/link              controllers.Account.doLink

GET     /accounts/merge             controllers.Account.askMerge
POST    /accounts/merge             controllers.Account.doMerge

GET     /authenticate/:provider     com.feth.play.module.pa.controllers.Authenticate.authenticate(provider: String)

GET     /accounts/unverified        controllers.Signup.unverified
GET     /authenticate/:provider/denied     controllers.Signup.oAuthDenied(provider: String)
# --------------------------------------------------------------------------


# ------------------------------ REST Services -----------------------------
# REST CRUD for Follows
GET     /follows                    controllers.FollowREST.getAllFollows()
GET     /follows/:id                controllers.FollowREST.getFollows(id: String)
POST    /follows                    controllers.FollowREST.addFollows()
PUT     /follows/:id                controllers.FollowREST.updateFollows(id: String)
DELETE  /follows/:id                controllers.FollowREST.deleteFollows(id: String)

# REST CRUD for Followed
GET     /followed                    controllers.FollowREST.getAllFollowed()
GET     /followed/:id                controllers.FollowREST.getFollowed(id: String)
POST    /followed                    controllers.FollowREST.addFollowed()
PUT     /followed/:id                controllers.FollowREST.updateFollowed(id: String)
DELETE  /followed/:id                controllers.FollowREST.deleteFollowed(id: String)

# REST CRUD for Users
GET     /users                      controllers.UserREST.getUsers()
GET     /users/:id                  controllers.UserREST.getUser(id: String)
POST    /users                      controllers.UserREST.addUser()
GET     /sessionuser                controllers.UserREST.getSessionUser

# REST CRUD for discussions
GET     /discussions                controllers.User2DiscussionREST.getDiscussions()
GET     /discussions/:id            controllers.User2DiscussionREST.getDiscussion(id: String)
GET     /discussions/:id/:msgid     controllers.User2DiscussionREST.getMessage(id: String, msgid: String)
POST    /discussions                controllers.User2DiscussionREST.addDiscussion()
POST	/discussions/:id            controllers.User2DiscussionREST.reply(id: String)
POST	/discussions/:id/:msgid     controllers.User2DiscussionREST.replyToMessage(id: String, msgid: String)

# REST CRUD for awards
GET     /rest/awards					controllers.AwardREST.all
GET     /rest/awards/:type/:limit		controllers.AwardREST.findByAwardTypeLimit(type: String, limit: Integer)
GET     /rest/user/:id/awards			controllers.AwardREST.findByUserId(id: String)
POST	/rest/user/:id/awards			controllers.AwardREST.saveUserAward(id: String)

# --------------------------------------------------------------------------


# TESTINGG!!!
GET     /items                    controllers.ItemREST.getItems()
GET     /items/:id                controllers.ItemREST.getItem(id: String)
POST    /items                    controllers.ItemREST.addItem()
PUT     /items/:id                controllers.ItemREST.updateItem(id: String)
DELETE  /items/:id                controllers.ItemREST.deleteItem(id: String)

POST    /items/test/:name              controllers.ItemREST.addTestItem(name: String)