# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~


# ------------------------------- Main routes ---------------------------------
# Home page
GET     /                           controllers.Assets.at(path="/public", file="index.html")
# this is a workaround for oAuth call
GET     /main                       controllers.Application.index
# Javascript routes
GET     /assets/javascript/routes.js    controllers.Application.jsRoutes
# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
# --------------------------------------------------------------------------


# ----------------------------- Authentication routes -------------------------
POST    /login                      controllers.Application.doLogin

GET     /logout                     controllers.Application.doLogout

POST    /signup                     controllers.Application.doSignup

GET     /accounts/verify/:token     controllers.Signup.verify(token: String)
GET     /accounts/exists            controllers.Signup.exists
GET     /tokenSuccess               controllers.Application.tokenSuccess
GET     /tokenFail                  controllers.Application.tokenFail

POST    /login/password/forgot      controllers.Signup.doForgotPassword
GET     /accounts/password/reset/:token     controllers.Signup.resetPassword(token: String, errors: java.lang.String ?= "")
POST    /accounts/password/reset    controllers.Signup.doResetPassword
GET     /passwordResetSuccess       controllers.Application.passwordResetSuccess
GET     /passwordResetFail/:msg     controllers.Application.passwordResetFail(msg: String)

POST    /accounts/password/change   controllers.Account.doChangePassword
# --------------------------------------------------------------------------



# ----------------- Authentication Unverified routes ----------------------
GET     /accounts/verify            controllers.Account.verifyEmail

GET     /accounts/link              controllers.Account.askLink
POST    /accounts/link              controllers.Account.doLink

GET     /accounts/merge             controllers.Account.askMerge
POST    /accounts/merge             controllers.Account.doMerge

GET     /authenticate/:provider     com.feth.play.module.pa.controllers.Authenticate.authenticate(provider: String)

GET     /accounts/unverified        controllers.Signup.unverified
GET     /authenticate/:provider/denied     controllers.Signup.oAuthDenied(provider: String)
# --------------------------------------------------------------------------


# Picture manager
GET     /photos/manager              controllers.Photos.manager


# ------------------------------ REST Services -----------------------------------------------------------

# REST CRUD for Follows
GET     /follows                    controllers.FollowsREST.getAllFollows()
GET     /follows/:id                controllers.FollowsREST.getFollows(id: String)
GET		/followsInfo			    controllers.FollowsREST.getAllFollowsInfo()

POST    /follows                    controllers.FollowsREST.addFollows()
PUT     /follows/:id                controllers.FollowsREST.updateFollows(id: String)
DELETE  /follows/:id                controllers.FollowsREST.deleteFollows(id: String)
PUT    /api/addFollows/:id  		controllers.FollowsREST.addfollows(id: String)
PUT 	/api/unfollow/:id 			controllers.FollowsREST.unfollow(id: String)


# REST CRUD for UserFollows
GET     /userfollows                controllers.FollowsREST.getAllUserFollows()
GET     /userfollows/:id            controllers.FollowsREST.getUserFollows(id: String)
POST    /userfollows                controllers.FollowsREST.addFollows()
PUT     /userfollows/:id            controllers.FollowsREST.updateFollows(id: String)
DELETE  /userfollows/:id            controllers.FollowsREST.deleteFollows(id: String)

# REST CRUD for Followed
GET     /followed                    controllers.FollowedREST.getAllFollowed()
GET		/followedInfo			    controllers.FollowedREST.getAllFollowedInfo()
GET     /followed/:id                controllers.FollowedREST.getFollowed(id: String)
POST    /followed                    controllers.FollowedREST.addFollowed()
PUT     /followed/:id                controllers.FollowedREST.updateFollowed(id: String)
DELETE  /followed/:id                controllers.FollowedREST.deleteFollowed(id: String)

# REST CRUD for UserFollowed
GET     /userfollowed                controllers.FollowedREST.getAllUserFollowed()
GET     /userfollowed/:id            controllers.FollowedREST.getUserFollowed(id: String)
POST    /userfollowed                controllers.FollowedREST.addFollowed()
PUT     /userfollowed/:id            controllers.FollowedREST.updateFollowed(id: String)
DELETE  /userfollowed/:id            controllers.FollowedREST.deleteFollowed(id: String)


# REST CRUD for Users
GET     /users                      controllers.UserREST.getAll()
GET     /relatedusers               controllers.UserREST.getAllRelated()
GET     /users/shortinfo            controllers.UserREST.getAllShortInfo()
GET     /users/:id                  controllers.UserREST.get(id: String)
GET     /users/:id/timeline         controllers.TimelineREST.getTimeline(id: String)
GET     /users/:id/routes           controllers.User2RoutesREST.getUserRoutes(id: String)
POST    /users                      controllers.UserREST.post()
PUT     /users/:id                  controllers.UserREST.put(id: String)
PUT     /userprofile/:id            controllers.UserREST.putProfile(id: String)
DELETE  /users/:id                  controllers.UserREST.delete(id: String)

PUT     /api/users 					controllers.UserREST.update()

GET     /sessionuser                controllers.UserREST.getSessionUser

# REST CRUD for discussions
GET     /discussions                controllers.User2DiscussionREST.getDiscussions()
GET     /discussions/from/:f/to/:t  controllers.User2DiscussionREST.getRangeDiscussions(f: Integer, t: Integer)
GET     /discussions/unread         controllers.User2DiscussionREST.getUnreadDiscussions()
GET     /discussions/:id            controllers.User2DiscussionREST.getDiscussion(id: String)
POST    /discussions                controllers.User2DiscussionREST.addDiscussion()
DELETE  /discussions/:id            controllers.User2DiscussionREST.deleteDiscussion(id: String)

# REST CRUD for messages (!!!they need a "discussion_id" in the body!!!)
GET     /messages/:id               controllers.User2DiscussionREST.getMessage(id: String)
PUT     /messages/:id               controllers.User2DiscussionREST.updateMessage(id: String)
POST	/messages                   controllers.User2DiscussionREST.reply()
POST	/messages/:id               controllers.User2DiscussionREST.replyToMessage(id: String)
DELETE  /messages/:id               controllers.User2DiscussionREST.deleteMessage(id: String)

# REST CRUD for news
GET     /news                       controllers.newsREST.getNews()
GET     /news/from/:f/to/:t         controllers.newsREST.getNewsRange(f: Integer, t: Integer)

# REST CRUD for publications
GET     /publications               controllers.TimelineREST.getPublications()
GET     /publications/from/:f/to/:t controllers.TimelineREST.getRangePublications(f: Integer, t: Integer)
GET     /publications/:id           controllers.TimelineREST.getPublication(id: String)
GET     /publications/:id/likes     controllers.TimelineREST.getPublicationLikes(id: String)
POST    /publications               controllers.TimelineREST.addPublication()
DELETE  /publications/:id           controllers.TimelineREST.deletePublication(id: String)

# REST CRUD for comments (!!!they need a "publicaton_id" in the body!!!)
GET     /comments/:id               controllers.TimelineREST.getMessage(id: String)
PUT     /comments/:id               controllers.TimelineREST.updateMessage(id: String)
POST	/comments                   controllers.TimelineREST.reply()
POST	/comments/:id               controllers.TimelineREST.replyToMessage(id: String)
DELETE  /comments/:id               controllers.TimelineREST.deleteMessage(id: String)

# REST CRUD for routes
GET     /routes                     controllers.User2RoutesREST.getRoutes()
GET     /routes/:id                 controllers.User2RoutesREST.getRoute(id: String)
POST    /routes/near/:amount        controllers.User2RoutesREST.getNearRoutes(amount: Integer)
POST    /routes/near/:amount/difficulty/:diff        controllers.User2RoutesREST.getNearDifficultyRoutes(amount: Integer, diff: Integer)
POST    /routes                     controllers.User2RoutesREST.addRoute()
DELETE  /routes/:id                 controllers.User2RoutesREST.deleteRoute(id: String)
PUT     /routes/:id                 controllers.User2RoutesREST.updateRoute(id: String)

# REST CRUD for awards
GET     /awards						controllers.AwardREST.getAwards()
GET     /awards/types				controllers.AwardREST.getAwardTypes()
GET		/awards/:id					controllers.AwardREST.getAward(id: String)
GET     /awards/types/:type			controllers.AwardREST.findByAwardType(type: String)

# REST CRUD for statistics
GET     /users/:id/statistics		controllers.UserStatisticsREST.getUserStatistics(id: String)
PUT		/users/:id/statistics		controllers.UserStatisticsREST.updateUserStatistics(id: String)
# --------------------------------------------------------------------------

#GET     /rest/awards				controllers.AwardREST.all
#GET     /rest/awards/:type/:limit	controllers.AwardREST.findByAwardTypeLimit(type: String, limit: Integer)
#GET     /rest/user/:id/awards	    controllers.AwardREST.findByUserId(id: String)
#POST	 /rest/user/:id/awards		controllers.AwardREST.saveUserAward(id: String)


#photo user 'likes' (to vote for a photo)

#to send a Json entity specifying that the user finds the photo interesting and/or useful
POST    /photos/:photoId/userlikes   controllers.PhotosREST.setPhotoUserLike(photoId: String)

#did :userId like :photoId ?
GET     /photos/:photoId/userlikes/:userId   controllers.PhotosREST.getPhotoUserLikes(photoId: String, userId:String, offset : Integer = 0, limit : Integer = 1)

#who likes :photoId ?
GET     /photos/:photoId/userlikes          controllers.PhotosREST.getPhotoUserLikes(photoId : String, userId = null, offset : Integer ?= 0, limit : Integer ?= models.PhotoUserLike.MAX_RESULTS_RETURNED)

#Retrieves just all the likes for a photo
GET     /photos/:photoId/likestats          controllers.PhotosREST.getPhotoLikeStats(photoId : String)

#find photos by rectangle:
# /photos/rect?x1={x1}&x2={x2}&y1={y1}&y2={y2}
GET     /photos/rect                           controllers.PhotosREST.getPhotosByRectangle(x1 : Double, x2 : Double, y1 : Double, y2 : Double, offset : Integer ?= 0, limit : Integer ?= models.Photo.MAX_RESULTS_RETURNED)


# REST CRUD for pictures
GET     /photos/:id             controllers.PhotosREST.getPhoto(id: String)
POST    /photos                 controllers.PhotosREST.newPhoto()
PUT     /photos/:id             controllers.PhotosREST.updatePhoto(id: String)
DELETE  /photos/:id             controllers.PhotosREST.deletePhoto(id: String)

# REST CRUD for pictures content
GET     /photos/:id/content      controllers.PhotosREST.getPhotoContent(id: String)
POST    /photos/:id/content      controllers.PhotosREST.uploadMultipartContent(id: String)

# REST CRUD for Maps
GET     /maps                    controllers.MapREST.getAllMaps()
GET     /maps/:id                controllers.MapREST.getMap(id: String)
POST    /maps                    controllers.MapREST.addMap()
PUT     /maps/:id                controllers.MapREST.updateMap(id: String)
DELETE  /maps/:id                controllers.MapREST.deleteMap(id: String)

# REST CRUD for Map Features
GET     /mapfeatures                 controllers.MapFeatureREST.getAllFeatures()
GET     /mapfeatures/:id             controllers.MapFeatureREST.getFeature(id: String)
POST    /mapfeatures                 controllers.MapFeatureREST.addFeature()
PUT     /mapfeatures/:id             controllers.MapFeatureREST.updateFeature(id: String)
DELETE  /mapfeatures/:id             controllers.MapFeatureREST.deleteFeature(id: String)

# REST CRUD for OSM Nodes
GET     /osmnodes/:id                 controllers.osm.OsmNodeREST.getNodeById(id: Long)
GET     /osmnodes/:id/json            controllers.osm.OsmNodeREST.getJsonNodeById(id: Long)
GET     /osmnodes/:id/xml             controllers.osm.OsmNodeREST.getXmlNodeById(id: Long)
GET     /osmnodes/intersects/:amount  controllers.osm.OsmNodeREST.getIntersectionNodes(amount: Integer)
POST    /osmnodes/near/:amount        controllers.osm.OsmNodeREST.getNearNodes(amount: Integer)
PUT     /osmnodes/:id                 controllers.osm.OsmNodeREST.updateNode(id: Long)
POST    /osmnodes                     controllers.osm.OsmNodeREST.addNode()
# DELETE  /osmnodes/:id                 controllers.osm.OsmNodeREST.deleteNode(id: Long)

# REST CRUD for OSM Ways
GET     /osmways/:id                 controllers.osm.OsmWayREST.getWayById(id: Long)
GET     /osmways/:id/json            controllers.osm.OsmWayREST.getJsonWayById(id: Long)
GET     /osmways/:id/xml             controllers.osm.OsmWayREST.getXmlWayById(id: Long)
GET     /osmways/intersects/:amount  controllers.osm.OsmWayREST.getIntersectionWays(amount: Integer)
POST    /osmways/near/:amount        controllers.osm.OsmWayREST.getNearWays(amount: Integer)
PUT     /osmways/:id                 controllers.osm.OsmWayREST.updateWay(id: Long)
POST    /osmways                     controllers.osm.OsmWayREST.addWay()
# DELETE  /osmways/:id                 controllers.osm.OsmWayREST.deleteWay(id: Long)

POST    /osmfeatures/near/:amount        controllers.osm.OsmFeatureREST.getNearFeatures(amount: Integer)

# REST CRUD for Routes Likes
GET     /routelikes                 controllers.RouteLikeREST.getAllRouteLikes()
GET     /routelikes/:id             controllers.RouteLikeREST.getRouteLike(id: String)
GET     /routelikesuser/:id         controllers.RouteLikeREST.getUserRouteLikes(id: String)
GET     /routelikesroute/:id        controllers.RouteLikeREST.getRouteRouteLikes(id: String)
GET     /routelikesrouteuser/:idr/:idu    controllers.RouteLikeREST.getRouteUserRouteLikes(idr: String, idu: String)
POST    /routelikes                 controllers.RouteLikeREST.addRouteLike()
PUT     /routelikes/:id             controllers.RouteLikeREST.updateRouteLike(id: String)
DELETE  /routelikes/:id             controllers.RouteLikeREST.deleteRouteLike(id: String)

# REST CRUD for Features Likes
GET     /featurelikes                 controllers.FeatureLikeREST.getAllFeatureLikes()
GET     /featurelikes/:id             controllers.FeatureLikeREST.getFeatureLike(id: String)
GET     /featurelikesuser/:id         controllers.FeatureLikeREST.getUserFeatureLikes(id: String)
GET     /featurelikesfeature/:id        controllers.FeatureLikeREST.getFeatureFeatureLikes(id: String)
GET     /featurelikesfeatureuser/:idf/:idu    controllers.FeatureLikeREST.getFeatureUserFeatureLikes(idf: String, idu: String)
POST    /featurelikes                 controllers.FeatureLikeREST.addFeatureLike()
PUT     /featurelikes/:id             controllers.FeatureLikeREST.updateFeatureLike(id: String)
DELETE  /featurelikes/:id             controllers.FeatureLikeREST.deleteFeatureLike(id: String)

# -------------------------------------------------------------------------------------------------------


GET     /osmFixmes/populateDB        controllers.games.OsmFixmesREST.populateDatabase()

POST    /invitemail           controllers.MailREST.sendInviteMail()
